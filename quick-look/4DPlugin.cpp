/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Quick Look
 #	author : miyako
 #	2015/04/28
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include <QuickLook/QuickLook.h>

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Quick Look

		case 1 :
			QL_REQUEST_PREVIEW(pResult, pParams);
			break;

		case 2 :
			QL_Get_file_thumbnail(pResult, pParams);
			break;

	}
}

// ---------------------------------- Quick Look ----------------------------------

void QL_REQUEST_PREVIEW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *path = Param1.copyPath();

	NSMutableArray * arguments = [[NSMutableArray alloc]init];
	[arguments addObject:@"-p"];
	[arguments addObject:path];	
	[NSTask launchedTaskWithLaunchPath:@"/usr/bin/qlmanage" arguments:arguments];
	[arguments release];
	
	[path release];	
}

void QL_Get_file_thumbnail(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_REAL Param2;
	C_REAL Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	CGFloat width = Param2.getDoubleValue();
	CGFloat height = Param3.getDoubleValue();
	
	NSURL *url = Param1.copyUrl();

	if(url){		
		CFDictionaryRef options = CFDictionaryCreate(kCFAllocatorDefault, NULL, NULL, 0, NULL, NULL);
		CGImageRef image = QLThumbnailImageCreate(kCFAllocatorDefault, (CFURLRef)url, CGSizeMake(width, height), options);
		
		if(image){
        
			CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);	
			CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
			CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
			
			CGImageDestinationAddImage(destination, image, properties);
			CGImageDestinationFinalize(destination);
            
            PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
            *(PA_Picture*) pResult = picture;
			
            CFRelease(properties);	
            CFRelease(destination);
			CFRelease(data);		
            	
			CFRelease(image);
		}
		
		CFRelease(options);	
		[url release];			
	}
}